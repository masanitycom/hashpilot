const { createClient } = require('@supabase/supabase-js');
const config = require('./external-tools/config.js');
const supabase = createClient(config.SUPABASE_URL, config.SUPABASE_ANON_KEY);

async function verifySystemLogic() {
  console.log('üîç „Ç∑„Çπ„ÉÜ„É†„É≠„Ç∏„ÉÉ„ÇØ„ÅÆÂÆåÂÖ®ÊÄßÊ§úË®º\n');
  console.log('='.repeat(60));
  
  const userId = '7A9637';
  
  // 1. ÁèæÂú®„ÅÆ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„É≠„Ç∏„ÉÉ„ÇØ„ÅÆÁ¢∫Ë™ç
  console.log('üìã ÁèæÂú®„ÅÆ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„É≠„Ç∏„ÉÉ„ÇØ:');
  console.log('   1. users„ÉÜ„Éº„Éñ„É´„Åã„Çâ total_purchases > 0 „ÅÆ„É¶„Éº„Ç∂„Éº„ÇíÂèñÂæó');
  console.log('   2. referrer_user_id „Åß„É¨„Éô„É´Âà•„Å´ÂàÜÈ°û');
  console.log('   3. Level 4+„ÇíË®àÁÆóÔºàÊúÄÂ§ß500„É¨„Éô„É´„Åæ„ÅßÔºâ');
  console.log('   4. ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÊ∏à„ÅøÔºàallProcessedIds‰ΩøÁî®Ôºâ\n');
  
  // 2. Êñ∞Ë¶èÁôªÈå≤„ÅÆÂΩ±Èüø„Çí„ÉÜ„Çπ„Éà
  console.log('üÜï Êñ∞Ë¶èÁôªÈå≤„ÅÆÂΩ±Èüø:');
  
  const { data: allUsers } = await supabase
    .from('users')
    .select('user_id, total_purchases, referrer_user_id, created_at')
    .order('created_at', { ascending: false });
  
  const usersWithPurchases = allUsers.filter(u => u.total_purchases > 0);
  const usersWithoutPurchases = allUsers.filter(u => u.total_purchases === 0 || u.total_purchases === null);
  
  console.log(`   ÂÖ®„É¶„Éº„Ç∂„ÉºÊï∞: ${allUsers.length}‰∫∫`);
  console.log(`   Ë≥ºÂÖ•Ê∏à„ÅøÔºàtotal_purchases > 0Ôºâ: ${usersWithPurchases.length}‰∫∫`);
  console.log(`   Êú™Ë≥ºÂÖ•Ôºàtotal_purchases = 0Ôºâ: ${usersWithoutPurchases.length}‰∫∫`);
  
  // ÊúÄËøëÁôªÈå≤„Åó„Åü„É¶„Éº„Ç∂„Éº„ÅÆÁ¢∫Ë™ç
  const recentUsers = allUsers.slice(0, 5);
  console.log('\n   ÊúÄËøëÁôªÈå≤„Åó„Åü5‰∫∫:');
  recentUsers.forEach(u => {
    console.log(`     - ${u.user_id}: total_purchases=$${u.total_purchases || 0}, Á¥π‰ªãËÄÖ=${u.referrer_user_id || '„Å™„Åó'}`);
  });
  
  console.log('\n   ‚úÖ Êñ∞Ë¶èÁôªÈå≤„ÅÆÂΩ±Èüø:');
  console.log('      - total_purchases = 0 „ÅÆÊñ∞Ë¶è„É¶„Éº„Ç∂„Éº„ÅØLevel4+Ë®àÁÆó„Å´Âê´„Åæ„Çå„Å™„ÅÑ');
  console.log('      - ÁÆ°ÁêÜËÄÖ„ÅåË≥ºÂÖ•„ÇíÊâøË™ç„Åó„Å¶total_purchases„ÅåÊõ¥Êñ∞„Åï„Çå„Çã„Åæ„ÅßÂΩ±Èüø„Å™„Åó');
  
  // 3. NFTË≥ºÂÖ•Áî≥Ë´ã„ÅÆÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
  console.log('\nüí∞ NFTË≥ºÂÖ•Áî≥Ë´ã„ÅÆÈáçË§á:');
  
  const { data: purchases } = await supabase
    .from('purchases')
    .select('user_id, amount_usd, nft_quantity, admin_approved, payment_status, created_at')
    .order('created_at', { ascending: false });
  
  if (purchases) {
    // „É¶„Éº„Ç∂„Éº„Åî„Å®„ÅÆË≥ºÂÖ•ÂõûÊï∞„ÇíÈõÜË®à
    const purchasesByUser = {};
    purchases.forEach(p => {
      if (!purchasesByUser[p.user_id]) {
        purchasesByUser[p.user_id] = {
          total: 0,
          approved: 0,
          pending: 0,
          rejected: 0
        };
      }
      purchasesByUser[p.user_id].total++;
      
      if (p.admin_approved === true) {
        purchasesByUser[p.user_id].approved++;
      } else if (p.admin_approved === false) {
        purchasesByUser[p.user_id].rejected++;
      } else {
        purchasesByUser[p.user_id].pending++;
      }
    });
    
    // Ë§áÊï∞Ë≥ºÂÖ•„Åå„ÅÇ„Çã„É¶„Éº„Ç∂„Éº„ÇíÊ§úÂá∫
    const multiPurchaseUsers = Object.entries(purchasesByUser)
      .filter(([_, stats]) => stats.total > 1)
      .map(([userId, stats]) => ({ userId, ...stats }));
    
    console.log(`   Ë§áÊï∞Ë≥ºÂÖ•Áî≥Ë´ã„Åå„ÅÇ„Çã„É¶„Éº„Ç∂„Éº: ${multiPurchaseUsers.length}‰∫∫`);
    
    if (multiPurchaseUsers.length > 0) {
      console.log('   ÊúÄÂàù„ÅÆ5‰∫∫:');
      multiPurchaseUsers.slice(0, 5).forEach(u => {
        console.log(`     - ${u.userId}: Áî≥Ë´ã${u.total}ÂõûÔºàÊâøË™çÊ∏à„Åø${u.approved}Âõû„ÄÅ‰øùÁïô${u.pending}Âõû„ÄÅÂç¥‰∏ã${u.rejected}ÂõûÔºâ`);
      });
    }
    
    // ÈáçË§áÊâøË™ç„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
    const duplicateApprovals = multiPurchaseUsers.filter(u => u.approved > 1);
    if (duplicateApprovals.length > 0) {
      console.log(`\n   ‚ö†Ô∏è Ë§áÊï∞ÂõûÊâøË™ç„Åï„Çå„Å¶„ÅÑ„Çã„É¶„Éº„Ç∂„Éº: ${duplicateApprovals.length}‰∫∫`);
      duplicateApprovals.slice(0, 3).forEach(u => {
        console.log(`     - ${u.userId}: ${u.approved}ÂõûÊâøË™çÊ∏à„Åø`);
      });
    }
  }
  
  // 4. total_purchases„ÅÆÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
  console.log('\nüìä total_purchases„ÅÆÊï¥ÂêàÊÄß:');
  
  if (purchases && usersWithPurchases) {
    // ÂêÑ„É¶„Éº„Ç∂„Éº„ÅÆÊâøË™çÊ∏à„ÅøË≥ºÂÖ•Á∑èÈ°ç„ÇíË®àÁÆó
    const approvedTotalsByUser = {};
    purchases
      .filter(p => p.admin_approved === true)
      .forEach(p => {
        approvedTotalsByUser[p.user_id] = (approvedTotalsByUser[p.user_id] || 0) + p.amount_usd;
      });
    
    // ‰∏çÊï¥Âêà„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    let consistentCount = 0;
    let inconsistentCount = 0;
    const inconsistencies = [];
    
    for (const user of usersWithPurchases) {
      const approvedTotal = approvedTotalsByUser[user.user_id] || 0;
      const difference = Math.abs(user.total_purchases - approvedTotal);
      
      if (difference < 1) { // 1„Éâ„É´Êú™Ê∫Ä„ÅÆË™§Â∑Æ„ÅØË®±ÂÆπ
        consistentCount++;
      } else {
        inconsistentCount++;
        inconsistencies.push({
          user_id: user.user_id,
          total_purchases: user.total_purchases,
          approved_sum: approvedTotal,
          difference: difference
        });
      }
    }
    
    console.log(`   ‚úÖ Êï¥ÂêàÊÄßOK: ${consistentCount}‰∫∫`);
    console.log(`   ‚ö†Ô∏è ‰∏çÊï¥Âêà: ${inconsistentCount}‰∫∫`);
    
    if (inconsistentCount > 0) {
      console.log('   ‰∏çÊï¥Âêà„ÅÆ‰æãÔºàÊúÄÂàù„ÅÆ3‰ª∂Ôºâ:');
      inconsistencies.slice(0, 3).forEach(i => {
        console.log(`     - ${i.user_id}: total_purchases=$${i.total_purchases}, ÊâøË™çÊ∏à„ÅøÂêàË®à=$${i.approved_sum}, Â∑ÆÈ°ç=$${i.difference}`);
      });
    }
  }
  
  // 5. Level 4+Ë®àÁÆó„ÅÆ„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
  console.log('\nüîÑ Level 4+Ë®àÁÆó„ÅÆÂÆâÂÆöÊÄß„ÉÜ„Çπ„Éà:');
  
  // ÁèæÂú®„ÅÆË®àÁÆó
  const currentLevel4Plus = calculateLevel4Plus(usersWithPurchases, userId);
  console.log(`   ÁèæÂú®„ÅÆLevel 4+: ${currentLevel4Plus}‰∫∫`);
  
  // Êñ∞Ë¶è„É¶„Éº„Ç∂„Éº„ÇíËøΩÂä†„Åó„ÅüÂ†¥Âêà„ÅÆ„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
  const simulatedNewUser = {
    user_id: 'NEW_USER_TEST',
    total_purchases: 0,
    referrer_user_id: userId // Áõ¥Êé•Á¥π‰ªã
  };
  
  const withNewUser = [...usersWithPurchases, simulatedNewUser];
  const newLevel4Plus = calculateLevel4Plus(withNewUser.filter(u => u.total_purchases > 0), userId);
  console.log(`   Êñ∞Ë¶èÁôªÈå≤ËøΩÂä†Âæå: ${newLevel4Plus}‰∫∫ÔºàÂ§âÂåñ„Å™„Åó‚úÖÔºâ`);
  
  // Êñ∞Ë¶è„É¶„Éº„Ç∂„Éº„ÅåË≥ºÂÖ•„Åó„ÅüÂ†¥Âêà
  simulatedNewUser.total_purchases = 1100;
  const withPurchasedUser = [...usersWithPurchases, simulatedNewUser];
  const purchasedLevel4Plus = calculateLevel4Plus(withPurchasedUser, userId);
  console.log(`   Êñ∞Ë¶è„É¶„Éº„Ç∂„ÉºË≥ºÂÖ•ÊâøË™çÂæå: ${purchasedLevel4Plus}‰∫∫ÔºàLevel 1„Å´ËøΩÂä†„Åï„Çå„Çã„Å†„ÅëÔºâ`);
  
  // 6. ÊúÄÁµÇÁµêË´ñ
  console.log('\n' + '='.repeat(60));
  console.log('üìå „Ç∑„Çπ„ÉÜ„É†„É≠„Ç∏„ÉÉ„ÇØ„ÅÆÊ§úË®ºÁµêÊûú:');
  console.log('='.repeat(60));
  
  console.log('\n‚úÖ ÁèæÂú®„ÅÆ„Ç∑„Çπ„ÉÜ„É†„É≠„Ç∏„ÉÉ„ÇØ„ÅØÊ≠£„Åó„ÅèÂãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„Åô:');
  console.log('   1. Êñ∞Ë¶èÁôªÈå≤„É¶„Éº„Ç∂„Éº„ÅØ total_purchases = 0 „Å™„ÅÆ„ÅßÂΩ±Èüø„Å™„Åó');
  console.log('   2. NFTË≥ºÂÖ•„ÅåÊâøË™ç„Åï„Çå„Å¶ total_purchases „ÅåÊõ¥Êñ∞„Åï„Çå„Åü„Å®„Åç„ÅÆ„Åø„Ç´„Ç¶„É≥„Éà');
  console.log('   3. ÈáçË§áË≥ºÂÖ•Áî≥Ë´ã„Åå„ÅÇ„Å£„Å¶„ÇÇ„ÄÅtotal_purchases„ÅØÁÆ°ÁêÜËÄÖ„ÅåÊ≠£„Åó„ÅèÁÆ°ÁêÜ');
  console.log('   4. Level 4+„ÅÆË®àÁÆó„ÅØÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÊ∏à„Åø„ÅßÊ≠£Á¢∫');
  
  console.log('\n‚ö†Ô∏è Ê≥®ÊÑèÁÇπ:');
  console.log('   - total_purchases„ÅØÁÆ°ÁêÜËÄÖ„ÅåÊâãÂãï„ÅßÊõ¥Êñ∞„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã');
  console.log('   - Ë≥ºÂÖ•ÊâøË™çÊôÇ„Å´total_purchases„ÅÆÊõ¥Êñ∞„ÇíÂøò„Çå„Å™„ÅÑ„Åì„Å®');
  console.log('   - Ë§áÊï∞Âõû„ÅÆË≥ºÂÖ•ÊâøË™ç„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÂêàË®àÈ°ç„ÅßÊõ¥Êñ∞„Åô„Çã„Åì„Å®');
  
  console.log('\nüéØ ÁµêË´ñ:');
  console.log('   Level 4+ = 89‰∫∫ „ÅØÊ≠£Á¢∫„Åß„Åô');
  console.log('   Êñ∞Ë¶èÁôªÈå≤„ÉªÈáçË§áÁî≥Ë´ã„Åå„ÅÇ„Å£„Å¶„ÇÇÂïèÈ°å„ÅÇ„Çä„Åæ„Åõ„Çì');
  console.log('   „Åü„Å†„Åó„ÄÅÁÆ°ÁêÜËÄÖ„ÅÆÊâøË™ç„Éó„É≠„Çª„Çπ„ÅåÊ≠£„Åó„ÅèË°å„Çè„Çå„Çã„Åì„Å®„ÅåÂâçÊèê„Åß„Åô');
}

// Level 4+Ë®àÁÆóÈñ¢Êï∞
function calculateLevel4Plus(users, userId) {
  const level1 = users.filter(u => u.referrer_user_id === userId);
  const level2 = users.filter(u => level1.some(l1 => l1.user_id === u.referrer_user_id));
  const level3 = users.filter(u => level2.some(l2 => l2.user_id === u.referrer_user_id));
  
  const allProcessedIds = new Set([
    userId,
    ...level1.map(u => u.user_id),
    ...level2.map(u => u.user_id),
    ...level3.map(u => u.user_id)
  ]);
  
  let currentLevelIds = new Set(level3.map(u => u.user_id));
  const level4Plus = [];
  let level = 4;
  
  while (currentLevelIds.size > 0 && level <= 500) {
    const nextLevel = users.filter(u => 
      currentLevelIds.has(u.referrer_user_id || '') && 
      !allProcessedIds.has(u.user_id)
    );
    
    if (nextLevel.length === 0) break;
    
    level4Plus.push(...nextLevel);
    const newIds = new Set(nextLevel.map(u => u.user_id));
    newIds.forEach(id => allProcessedIds.add(id));
    currentLevelIds = newIds;
    level++;
  }
  
  return level4Plus.length;
}

verifySystemLogic().catch(console.error);