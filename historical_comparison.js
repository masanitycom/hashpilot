const { createClient } = require('@supabase/supabase-js');
const config = require('./external-tools/config.js');
const supabase = createClient(config.SUPABASE_URL, config.SUPABASE_ANON_KEY);

async function historicalComparison() {
  console.log('üîÑ 160‰∫∫„Å´„Å™„Å£„Å¶„ÅÑ„ÅüÁêÜÁî±„ÅÆÁâπÂÆö...\n');
  
  const userId = '7A9637';
  
  const { data: allUsers, error } = await supabase
    .from('users')
    .select('user_id, total_purchases, referrer_user_id')
    .gt('total_purchases', 0);

  if (error) {
    console.error('„Ç®„É©„Éº:', error);
    return;
  }

  console.log('üîç ËÄÉ„Åà„Çâ„Çå„ÇãÂè§„ÅÑ„É≠„Ç∏„ÉÉ„ÇØ„ÅÆ„Éë„Çø„Éº„É≥:');
  
  // „Éë„Çø„Éº„É≥1: ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ„Å™„ÅóÔºàÊúÄ„ÇÇÂèØËÉΩÊÄß„ÅåÈ´ò„ÅÑÔºâ
  console.log('\nüìù „Éë„Çø„Éº„É≥1: ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ„Å™„Åó„ÅÆÂÜçÂ∏∞Ë®àÁÆó');
  let totalWithoutDuplication = 0;
  let level4PlusWithoutDuplication = 0;
  
  function countRecursive(currentUserId, level, visited = new Set()) {
    // ÁÑ°Èôê„É´„Éº„ÉóÈò≤Ê≠¢Ôºà„Åü„Å†„ÅóÈáçË§á„ÅØ„Ç´„Ç¶„É≥„ÉàÔºâ
    if (visited.has(currentUserId)) return;
    visited.add(currentUserId);
    
    const children = allUsers.filter(u => u.referrer_user_id === currentUserId);
    
    for (const child of children) {
      totalWithoutDuplication++;
      if (level >= 4) {
        level4PlusWithoutDuplication++;
      }
      
      // ÂÜçÂ∏∞ÁöÑ„Å´Â≠ê„ÇíÂá¶ÁêÜ
      countRecursive(child.user_id, level + 1, new Set(visited)); // Êñ∞„Åó„ÅÑvisited„Çª„ÉÉ„Éà„Çí‰ΩøÁî®
    }
  }
  
  countRecursive(userId, 1);
  console.log(`   ÂêàË®à: ${totalWithoutDuplication}‰∫∫`);
  console.log(`   Level 4+: ${level4PlusWithoutDuplication}‰∫∫`);
  
  // „Éë„Çø„Éº„É≥2: 10„É¨„Éô„É´Âà∂Èôê„ÅÇ„Çä
  console.log('\nüìù „Éë„Çø„Éº„É≥2: 10„É¨„Éô„É´Âà∂ÈôêÁâà');
  const level1 = allUsers.filter(u => u.referrer_user_id === userId);
  const level2 = allUsers.filter(u => level1.some(l1 => l1.user_id === u.referrer_user_id));
  const level3 = allUsers.filter(u => level2.some(l2 => l2.user_id === u.referrer_user_id));

  const allProcessedIds = new Set([
    userId,
    ...level1.map(u => u.user_id),
    ...level2.map(u => u.user_id),
    ...level3.map(u => u.user_id)
  ]);

  let currentLevelIds = new Set(level3.map(u => u.user_id));
  const level4Plus_10limit = [];
  
  let level = 4;
  while (currentLevelIds.size > 0 && level <= 10) { // 10„É¨„Éô„É´Âà∂Èôê
    const nextLevel = allUsers.filter(u => 
      currentLevelIds.has(u.referrer_user_id || '') && 
      !allProcessedIds.has(u.user_id)
    );
    
    if (nextLevel.length === 0) break;
    
    level4Plus_10limit.push(...nextLevel);
    const newIds = new Set(nextLevel.map(u => u.user_id));
    newIds.forEach(id => allProcessedIds.add(id));
    currentLevelIds = newIds;
    level++;
  }
  
  console.log(`   Level 4+ (10„É¨„Éô„É´Âà∂Èôê): ${level4Plus_10limit.length}‰∫∫`);
  
  // „Éë„Çø„Éº„É≥3: ÂÖ®„É¶„Éº„Ç∂„ÉºÂê´„ÇÄÔºàtotal_purchases > 0„ÅÆÊù°‰ª∂„Å™„ÅóÔºâ
  console.log('\nüìù „Éë„Çø„Éº„É≥3: ÂÖ®„É¶„Éº„Ç∂„ÉºÂê´„ÇÄÁâà');
  const { data: allUsersIncludeZero } = await supabase
    .from('users')
    .select('user_id, total_purchases, referrer_user_id');
    
  if (allUsersIncludeZero) {
    const level1_all = allUsersIncludeZero.filter(u => u.referrer_user_id === userId);
    const level2_all = allUsersIncludeZero.filter(u => level1_all.some(l1 => l1.user_id === u.referrer_user_id));
    const level3_all = allUsersIncludeZero.filter(u => level2_all.some(l2 => l2.user_id === u.referrer_user_id));

    const allProcessedIds_all = new Set([
      userId,
      ...level1_all.map(u => u.user_id),
      ...level2_all.map(u => u.user_id),
      ...level3_all.map(u => u.user_id)
    ]);

    let currentLevelIds_all = new Set(level3_all.map(u => u.user_id));
    const level4Plus_all = [];
    
    let level_all = 4;
    while (currentLevelIds_all.size > 0 && level_all <= 500) {
      const nextLevel = allUsersIncludeZero.filter(u => 
        currentLevelIds_all.has(u.referrer_user_id || '') && 
        !allProcessedIds_all.has(u.user_id)
      );
      
      if (nextLevel.length === 0) break;
      
      level4Plus_all.push(...nextLevel);
      const newIds = new Set(nextLevel.map(u => u.user_id));
      newIds.forEach(id => allProcessedIds_all.add(id));
      currentLevelIds_all = newIds;
      level_all++;
    }
    
    console.log(`   ÂÖ®„É¶„Éº„Ç∂„ÉºÊï∞: ${allUsersIncludeZero.length}‰∫∫`);
    console.log(`   Level 1: ${level1_all.length}‰∫∫`);
    console.log(`   Level 2: ${level2_all.length}‰∫∫`);
    console.log(`   Level 3: ${level3_all.length}‰∫∫`);
    console.log(`   Level 4+: ${level4Plus_all.length}‰∫∫`);
  }
  
  // „Éë„Çø„Éº„É≥4: „Éá„Éº„Çø„ÅÆÊôÇÈñìÁöÑÂ§âÂåñ
  console.log('\nüìù „Éë„Çø„Éº„É≥4: „Éá„Éº„ÇøÂ§âÂåñ„ÅÆÂèØËÉΩÊÄß');
  
  // ÊúÄËøë‰ΩúÊàê„Åï„Çå„Åü„É¶„Éº„Ç∂„Éº„ÇíÈô§Â§ñ„Åó„Å¶„ÉÜ„Çπ„Éà
  const oneMonthAgo = new Date();
  oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
  
  const oldUsers = allUsers.filter(u => {
    // created_at„Éï„Ç£„Éº„É´„Éâ„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÂè§„ÅÑ„É¶„Éº„Ç∂„Éº„Å®„Åó„Å¶Êâ±„ÅÜ
    return true; // Á∞°Áï•Âåñ
  });
  
  console.log(`   Âè§„ÅÑ„Éá„Éº„ÇøÊÉ≥ÂÆö„É¶„Éº„Ç∂„ÉºÊï∞: ${oldUsers.length}‰∫∫ÔºàÁèæÂú®„Å®Âêå„ÅòÔºâ`);
  
  console.log('\n=== ÁµêË´ñ ===');
  console.log(`ÁèæÂú®„ÅÆÊ≠£Á¢∫„Å™ÂÄ§: 89‰∫∫`);
  console.log(`ÈáçË§á„Å™„ÅóÂÜçÂ∏∞Áâà: ${level4PlusWithoutDuplication}‰∫∫`);
  console.log(`10„É¨„Éô„É´Âà∂ÈôêÁâà: ${level4Plus_10limit.length}‰∫∫`);
  
  if (allUsersIncludeZero) {
    const level4Plus_all_count = allUsersIncludeZero.filter(u => u.referrer_user_id === userId).length; // Á∞°Áï•Ë®àÁÆó
    console.log(`ÂÖ®„É¶„Éº„Ç∂„ÉºÁâà: Ë®àÁÆóË§áÈõë„ÅÆ„Åü„ÇÅÁúÅÁï•`);
  }
  
  console.log('\nüéØ 160‰∫∫„Å´ÊúÄ„ÇÇËøë„ÅÑÂÄ§„ÇíÁâπÂÆö...');
  const candidates = [
    { name: 'ÈáçË§á„Å™„ÅóÂÜçÂ∏∞', value: level4PlusWithoutDuplication },
    { name: '10„É¨„Éô„É´Âà∂Èôê', value: level4Plus_10limit.length },
  ];
  
  candidates.forEach(c => {
    const diff = Math.abs(c.value - 160);
    console.log(`   ${c.name}: ${c.value}‰∫∫ (160„Å®„ÅÆÂ∑Æ: ${diff})`);
  });
}

historicalComparison().catch(console.error);